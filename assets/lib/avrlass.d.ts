// Generated by claude

// declare class AVRLASS {
declare class AVRLASS {
    constructor();

    device: {
        name: string;
        instr_set: string;
        flash_bytes: number;
        ram_start: number;
    };

    summary: {
        C: { max: number; data: number; code: number; };
        D: { max: number; data: number; code: number; };
        E: { max: number; data: number; code: number; };
    };

    /**
     * Creates a new context with predefined AVR registers and helper functions
     */
    new_context(context: Record<string, any>): Record<string, any>;

    /**
     * Parses AVR assembly code
     * @param str Assembly code string
     * @param reader Function to read included files
     * @param context Compilation context
     */
    parse(str: string, reader: (filename: string) => string, context: Record<string, any>): {
        __main__: Array<[string, any[]]>;
        [key: string]: Array<[string, any[]]>;
    };

    /**
     * Compiles parsed assembly into machine code instructions
     * @param ins Parsed instructions
     * @param context Compilation context
     */
    compile(ins: {
        __main__: Array<[string, any[]]>;
        [key: string]: Array<[string, any[]]>;
    }, context: Record<string, any>): Array<[number, string, any[]]>;

    /**
     * Assembles compiled instructions into binary code
     * @param lst Compiled instructions
     */
    assemble(lst: Array<[number, string, any[]]>): number[];

    /**
     * Converts binary code to Intel HEX format
     * @param code Binary code array
     */
    to_ihex(code: number[]): string;

    /**
     * Prints memory usage summary
     */
    print_summary(): string;

    /**
     * Convenience method to assemble code directly to HEX format
     * @param str Assembly code string
     * @param reader Function to read included files
     */
    asm_to_hex(str: string, reader: (filename: string) => string): string;
}

declare namespace AVRLASS {
    interface DeviceInfo {
        name: string;
        instr_set: string;
        flash_bytes: number;
        ram_start: number;
    }

    interface SegmentSummary {
        max: number;
        data: number;
        code: number;
    }

    interface Summary {
        C: SegmentSummary;
        D: SegmentSummary;
        E: SegmentSummary;
    }
}

export = AVRLASS;
